<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Get IV_Values"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MK11.exe
  Version: 
  Date   : 2020-09-19
  Author : Admin

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(getIV,MK11.exe,66 0F 1F 44 00 00 4D 89 D9) // should be unique
alloc(newmem,$1000,"MK11.exe"+D1FB27A)
globalalloc(iv_value, $8, "MK11.exe"+D1FB27a)
globalalloc(iv2_value, $8, "MK11.exe"+D1FB27a)
globalalloc(iv3_value, $8, "MK11.exe"+D1FB27a)
globalalloc(iv4_value, $8, "MK11.exe"+D1FB27a)
globalalloc(iv5_value, $8, "MK11.exe"+D1FB27a)


label(code)
label(return)

newmem:
  mov [iv_value], r11
  mov [iv2_value], r10
  mov [iv3_value], rcx
  mov r11, [rsp+70]
  mov [iv4_value], r11
  mov r11, [rsp+88]
  mov [iv5_value], r11
  mov r11, [iv_value]

code:
  nop word ptr [rax+rax+00]
  jmp return

getIV:
  jmp newmem
  nop
return:
registersymbol(getIV)

[DISABLE]

getIV:
  db 66 0F 1F 44 00 00

unregistersymbol(getIV)
dealloc(newmem)
dealloc(iv_value)
dealloc(iv2_value)
dealloc(iv3_value)
dealloc(iv4_value)
dealloc(iv5_value)

{
// ORIGINAL CODE - INJECTION POINT: "MK11.exe"+D1FB27A

"MK11.exe"+D1FB238: 45 31 E4                       -  xor r12d,r12d
"MK11.exe"+D1FB23B: 48 BE CD CC CC CC CC CC CC CC  -  mov rsi,CCCCCCCCCCCCCCCD
"MK11.exe"+D1FB245: 41 01 FA                       -  add r10d,edi
"MK11.exe"+D1FB248: 41 B8 FF FF FF FF              -  mov r8d,FFFFFFFF
"MK11.exe"+D1FB24E: 01 D0                          -  add eax,edx
"MK11.exe"+D1FB250: 44 89 54 24 20                 -  mov [rsp+20],r10d
"MK11.exe"+D1FB255: 89 84 24 88 00 00 00           -  mov [rsp+00000088],eax
"MK11.exe"+D1FB25C: 48 BF 93 24 49 92 24 49 92 24  -  mov rdi,2492492492492493
"MK11.exe"+D1FB266: 48 B8 81 80 80 80 80 80 80 80  -  mov rax,8080808080808081
"MK11.exe"+D1FB270: 49 BE AB AA AA AA AA AA AA AA  -  mov r14,AAAAAAAAAAAAAAAB
// ---------- INJECTING HERE ----------
"MK11.exe"+D1FB27A: 66 0F 1F 44 00 00              -  nop word ptr [rax+rax+00]
// ---------- DONE INJECTING  ----------
"MK11.exe"+D1FB280: 4D 89 D9                       -  mov r9,r11
"MK11.exe"+D1FB283: 4D 31 C1                       -  xor r9,r8
"MK11.exe"+D1FB286: 49 F7 E1                       -  mul r9
"MK11.exe"+D1FB289: 4D 89 C8                       -  mov r8,r9
"MK11.exe"+D1FB28C: 48 C1 EA 07                    -  shr rdx,07
"MK11.exe"+D1FB290: 48 69 C2 FF 00 00 00           -  imul rax,rdx,000000FF
"MK11.exe"+D1FB297: 49 29 C0                       -  sub r8,rax
"MK11.exe"+D1FB29A: 48 89 F0                       -  mov rax,rsi
"MK11.exe"+D1FB29D: 49 F7 E0                       -  mul r8
"MK11.exe"+D1FB2A0: 48 B8 8F E3 38 8E E3 38 8E E3  -  mov rax,E38E38E38E38E38F
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Get Access Token"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MK11.exe
  Version: 
  Date   : 2020-09-19
  Author : Admin

  This script does blah blah blah
}

[ENABLE]

//aobscanregion(access_token,MK11.exe,0, 00007fffffffffff, 30 05 74 6F 6B 65 6E 30 80) // "0" 5 "token" "0" 128 Access_Token
{$lua}

function getAccessToken(Bytes)
local StartAddress=0;
local EndAddress=0x7fffffffffff;
local Scan = createMemScan();
Scan.OnlyOneResult=true;
Scan.firstScan(soExactValue, vtByteArray, rtTruncated, Bytes, "", StartAddress, EndAddress, "", fsmNotAligned, "", true, false, false, false);
Scan.waitTillDone();
return Scan.getOnlyResult();
end

access_token = getAccessToken("30 05 74 6F 6B 65 6E 30 80")

registerSymbol(access_token)

[DISABLE]
unregisterSymbol(access_token)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"IV_1"</Description>
      <LastState Value="3FFEBEB9" RealAddress="1571D0000"/>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>iv_value</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"IV_2"</Description>
      <LastState Value="84D4431E" RealAddress="1571D0010"/>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>iv2_value</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Extra_1"</Description>
      <LastState Value="5E7DFFBA" RealAddress="1571D0030"/>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>iv4_value</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Extra_2"</Description>
      <LastState Value="02379009" RealAddress="1571D0040"/>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>4 Bytes</VariableType>
      <Address>iv5_value</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Access Token"</Description>
      <LastState RealAddress="B52F025B"/>
      <VariableType>String</VariableType>
      <Length>128</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>access_token+9</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iv_value</Name>
      <Address>1571D0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iv2_value</Name>
      <Address>1571D0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iv3_value</Name>
      <Address>1571D0020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iv4_value</Name>
      <Address>1571D0030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iv5_value</Name>
      <Address>1571D0040</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
